/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface VotingInterface extends utils.Interface {
  functions: {
    "candidateData(uint256,uint256)": FunctionFragment;
    "createPolling(address[])": FunctionFragment;
    "fee()": FunctionFragment;
    "finish(uint256)": FunctionFragment;
    "numPollings()": FunctionFragment;
    "owner()": FunctionFragment;
    "pollingData(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vote(uint256,uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "candidateData"
      | "createPolling"
      | "fee"
      | "finish"
      | "numPollings"
      | "owner"
      | "pollingData"
      | "renounceOwnership"
      | "transferOwnership"
      | "vote"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "candidateData",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPolling",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finish",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numPollings",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pollingData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "candidateData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPolling",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finish", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numPollings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pollingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CreatedEvent(uint256)": EventFragment;
    "FinishedEvent(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "VotedEvent(uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatedEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FinishedEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotedEvent"): EventFragment;
}

export interface CreatedEventEventObject {
  pollingId: BigNumber;
}
export type CreatedEventEvent = TypedEvent<
  [BigNumber],
  CreatedEventEventObject
>;

export type CreatedEventEventFilter = TypedEventFilter<CreatedEventEvent>;

export interface FinishedEventEventObject {
  winnerAddr: string;
}
export type FinishedEventEvent = TypedEvent<[string], FinishedEventEventObject>;

export type FinishedEventEventFilter = TypedEventFilter<FinishedEventEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface VotedEventEventObject {
  pollingId: BigNumber;
  candidateId: BigNumber;
  voterAddr: string;
}
export type VotedEventEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  VotedEventEventObject
>;

export type VotedEventEventFilter = TypedEventFilter<VotedEventEvent>;

export interface Voting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    candidateData(
      _pollingId: BigNumberish,
      _candidateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { addr: string; votes: BigNumber }>;

    createPolling(
      _candidates: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    finish(
      _pollingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    numPollings(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pollingData(
      _pollingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber, string[]] & {
        winner: string;
        finishDate: BigNumber;
        finished: boolean;
        amount: BigNumber;
        candidates: string[];
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      _pollingId: BigNumberish,
      _candidateId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  candidateData(
    _pollingId: BigNumberish,
    _candidateId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { addr: string; votes: BigNumber }>;

  createPolling(
    _candidates: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  finish(
    _pollingId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  numPollings(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pollingData(
    _pollingId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, BigNumber, string[]] & {
      winner: string;
      finishDate: BigNumber;
      finished: boolean;
      amount: BigNumber;
      candidates: string[];
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    _pollingId: BigNumberish,
    _candidateId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    candidateData(
      _pollingId: BigNumberish,
      _candidateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { addr: string; votes: BigNumber }>;

    createPolling(
      _candidates: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    finish(_pollingId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    numPollings(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pollingData(
      _pollingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, BigNumber, string[]] & {
        winner: string;
        finishDate: BigNumber;
        finished: boolean;
        amount: BigNumber;
        candidates: string[];
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      _pollingId: BigNumberish,
      _candidateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CreatedEvent(uint256)"(pollingId?: null): CreatedEventEventFilter;
    CreatedEvent(pollingId?: null): CreatedEventEventFilter;

    "FinishedEvent(address)"(winnerAddr?: null): FinishedEventEventFilter;
    FinishedEvent(winnerAddr?: null): FinishedEventEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "VotedEvent(uint256,uint256,address)"(
      pollingId?: null,
      candidateId?: null,
      voterAddr?: null
    ): VotedEventEventFilter;
    VotedEvent(
      pollingId?: null,
      candidateId?: null,
      voterAddr?: null
    ): VotedEventEventFilter;
  };

  estimateGas: {
    candidateData(
      _pollingId: BigNumberish,
      _candidateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPolling(
      _candidates: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    finish(
      _pollingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    numPollings(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pollingData(
      _pollingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      _pollingId: BigNumberish,
      _candidateId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    candidateData(
      _pollingId: BigNumberish,
      _candidateId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPolling(
      _candidates: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finish(
      _pollingId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    numPollings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pollingData(
      _pollingId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      _pollingId: BigNumberish,
      _candidateId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
